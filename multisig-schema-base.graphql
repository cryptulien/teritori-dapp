type Multisig {
  chainId: String!
  name: String
  pubkeyJSON: String!
  userAddresses: [String!]!
  address: String!
}

type Signature {
  bodyBytes: String!
  signature: String!
  address: String!
  transaction: Transaction!
}

type Transaction {
  txHash: String
  signatures: [Signature!]!
  multisig: Multisig!
  sequence: Int
  decliners: [String!]!
  createdAt: Time!
  createdBy: String
  accountNumber: Int
  msgs: String
  memo: String
  fee: String
}

type TransactionsCounts @embedded {
  total: Int!
  executed: Int!
}

type Query {
  getUserMultisigs(
    chainId: String!
    userAddress: String!
    size: Int!
    before: Time
  ): [Multisig!]! @resolver(name: "getUserMultisigs")

  getUserTransactions(
    chainId: String!
    userAddress: String!
    size: Int!
    before: Time
  ): [Transaction!]! @resolver(name: "getUserTransactions")

  getMultisig(chainId: String!, address: String!): Multisig!
    @resolver(name: "getMultisig")

  getMultisigTransactions(
    chainId: String!
    multisigAddress: String!
    size: Int!
    before: Time
  ): [Transaction!]! @resolver(name: "getMultisigTransactions")

  getMultisigTransactionsCounts(
    chainId: String!
    address: String!
  ): TransactionsCounts! @resolver(name: "getMultisigTransactionsCounts")
}
